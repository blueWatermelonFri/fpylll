name: Release

on:
  push:
    tags:
    - '*'

jobs:
  build:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Build
        run: |
          pip install Cython
          pip install setuptools
          python setup.py sdist
          
      - uses: actions/upload-artifact@v4
        with:
          path: "dist/*.tar.gz"
          name: dist

  build_wheels:
    name: Build wheels on ${{ matrix.os }}, arch ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: i686
          - os: macos-13
            arch: auto
          - os: macos-14
            arch: auto
    env:
      # SPKGs to install as system packages
      SPKGS: _bootstrap _prereq
      # Non-Python packages to install as spkgs
      TARGETS_PRE: gmp mpfr mpc fplll-ensure
      # Disable building PyPy wheels on all platforms
      CIBW_SKIP: "pp*"
      #
      CIBW_ARCHS: ${{ matrix.arch }}
      # https://cibuildwheel.readthedocs.io/en/stable/options/#requires-python
      CIBW_PROJECT_REQUIRES_PYTHON: ">=3.9"
      # Environment during wheel build
      CIBW_ENVIRONMENT: "PATH=$(pwd)/local/bin:$PATH CPATH=$(pwd)/local/include:$CPATH LIBRARY_PATH=$(pwd)/local/lib:$LIBRARY_PATH LD_LIBRARY_PATH=$(pwd)/local/lib:$LD_LIBRARY_PATH PKG_CONFIG_PATH=$(pwd)/local/share/pkgconfig:$PKG_CONFIG_PATH ACLOCAL_PATH=/usr/share/aclocal"
      # Use 'build', not 'pip wheel'
      CIBW_BUILD_FRONTEND: build
    steps:
      - uses: actions/checkout@v4
        with:
          # Use fplll 5.5.0 upgrade from https://github.com/passagemath/passagemath/pull/444
          repository:   passagemath/passagemath
          ref:          refs/pull/444/merge

      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - uses: actions/setup-python@v5
        # As of 2024-02-03, the macOS M1 runners do not have preinstalled python or pipx.
        # Installing pipx follows the approach of https://github.com/pypa/cibuildwheel/pull/1743
        id: python
        with:
          python-version: "3.8 - 3.12"
          update-environment: false

      - name: Build platform wheels
        # We build the wheel from the sdist.
        # But we must run cibuildwheel with the unpacked source directory, not a tarball,
        # so that SAGE_ROOT is copied into the build containers.
        #
        # In the CIBW_BEFORE_ALL phase, we install libraries using the Sage distribution.
        # https://cibuildwheel.readthedocs.io/en/stable/options/#before-all
        run: |
          "${{ steps.python.outputs.python-path }}" -m pip install pipx
          export PATH=build/bin:$PATH
          export CIBW_BEFORE_ALL="( $(sage-print-system-package-command debian --yes --no-install-recommends install $(sage-get-system-packages debian $SPKGS)) || $(sage-print-system-package-command fedora --yes --no-install-recommends install $(sage-get-system-packages fedora $SPKGS | sed s/pkg-config/pkgconfig/)) || ( $(sage-print-system-package-command homebrew --yes --no-install-recommends install $(sage-get-system-packages homebrew $SPKGS)) || $(sage-print-system-package-command alpine --yes --no-install-recommends install $(sage-get-system-packages alpine $SPKGS)) || echo error ignored) ) && ./bootstrap && ./configure --enable-build-as-root --enable-fat-binary && MAKE=\"make -j6\" make V=0 $TARGETS_PRE"
          mkdir -p unpacked
          for pkg in fpylll; do
              (cd unpacked && tar xfz - ) < dist/$pkg*.tar.gz
              "${{ steps.python.outputs.python-path }}" -m pipx run cibuildwheel==2.21.3 unpacked/$pkg*
          done

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-wheels
          path: ./wheelhouse/*.whl
